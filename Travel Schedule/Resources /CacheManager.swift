//
//  CacheManager.swift
//  Travel Schedule
//
//  Created by –î–∏–æ–Ω–∏—Å–∏–π –ö–æ–Ω–µ–≤–∏—á–µ–Ω–∫–æ on 18.09.2025.
//

import Foundation
import SwiftUI


@MainActor
final class CacheManager: ObservableObject {
    static let shared = CacheManager()
    
    // MARK: - Cache Storage
    @Published private var citiesCache: [Cities] = []
    @Published private var stationsCache: [String: [RailwayStations]] = [:]
    @Published private var scheduleCache: [String: [CarrierRoute]] = [:]
    
    // MARK: - Cache Timestamps
    private var citiesCacheTimestamp: Date?
    private var stationsCacheTimestamp: [String: Date] = [:]
    private var scheduleCacheTimestamp: [String: Date] = [:]
    
    // MARK: - Cache Settings
    private let cacheExpirationTime: TimeInterval = 30 * 60
    private let maxScheduleCacheSize = 50
    
    private init() {
        print("üóÑÔ∏è CacheManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    }
    
    // MARK: - Cities Cache
    
    
    func getCachedCities() -> [Cities]? {
        guard let timestamp = citiesCacheTimestamp,
              !isCacheExpired(timestamp: timestamp) else {
            print("üóÑÔ∏è –ö–µ—à –≥–æ—Ä–æ–¥–æ–≤ —É—Å—Ç–∞—Ä–µ–ª –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
            return nil
        }
        
        print("üóÑÔ∏è –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≥–æ—Ä–æ–¥–∞: \(citiesCache.count) —à—Ç.")
        return citiesCache
    }
    
    
    func cacheCities(_ cities: [Cities]) {
        citiesCache = cities
        citiesCacheTimestamp = Date()
        print("üóÑÔ∏è –ì–æ—Ä–æ–¥–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –∫–µ—à: \(cities.count) —à—Ç.")
    }
    
    // MARK: - Stations Cache
    
    func getCachedStations(for cityName: String) -> [RailwayStations]? {
        guard let timestamp = stationsCacheTimestamp[cityName],
              !isCacheExpired(timestamp: timestamp),
              let stations = stationsCache[cityName] else {
            print("üóÑÔ∏è –ö–µ—à —Å—Ç–∞–Ω—Ü–∏–π –¥–ª—è –≥–æ—Ä–æ–¥–∞ '\(cityName)' —É—Å—Ç–∞—Ä–µ–ª –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
            return nil
        }
        
        print("üóÑÔ∏è –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å—Ç–∞–Ω—Ü–∏–∏ –¥–ª—è '\(cityName)': \(stations.count) —à—Ç.")
        return stations
    }
    
    
    func cacheStations(_ stations: [RailwayStations], for cityName: String) {
        stationsCache[cityName] = stations
        stationsCacheTimestamp[cityName] = Date()
        print("üóÑÔ∏è –°—Ç–∞–Ω—Ü–∏–∏ –¥–ª—è –≥–æ—Ä–æ–¥–∞ '\(cityName)' —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –∫–µ—à: \(stations.count) —à—Ç.")
    }
    
    // MARK: - Schedule Cache
    
    
    func getCachedSchedule(from: String, to: String, date: String) -> [CarrierRoute]? {
        let key = "\(from)_\(to)_\(date)"
        
        guard let timestamp = scheduleCacheTimestamp[key],
              !isCacheExpired(timestamp: timestamp),
              let routes = scheduleCache[key] else {
            print("üóÑÔ∏è –ö–µ—à —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è '\(key)' —É—Å—Ç–∞—Ä–µ–ª –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
            return nil
        }
        
        print("üóÑÔ∏è –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è '\(key)': \(routes.count) —à—Ç.")
        return routes
    }
    
    
    func cacheSchedule(_ routes: [CarrierRoute], from: String, to: String, date: String) {
        let key = "\(from)_\(to)_\(date)"
        
        if scheduleCache.count >= maxScheduleCacheSize {
            clearOldestScheduleCache()
        }
        
        scheduleCache[key] = routes
        scheduleCacheTimestamp[key] = Date()
        print("üóÑÔ∏è –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è '\(key)' —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –∫–µ—à: \(routes.count) —à—Ç.")
    }
    
    // MARK: - Cache Management
    
    
    private func isCacheExpired(timestamp: Date) -> Bool {
        Date().timeIntervalSince(timestamp) > cacheExpirationTime
    }
    
    
    private func clearOldestScheduleCache() {
        guard !scheduleCacheTimestamp.isEmpty else { return }
        
        
        let oldestKey = scheduleCacheTimestamp.min { $0.value < $1.value }?.key
        
        if let keyToRemove = oldestKey {
            scheduleCache.removeValue(forKey: keyToRemove)
            scheduleCacheTimestamp.removeValue(forKey: keyToRemove)
            print("üóÑÔ∏è –£–¥–∞–ª–µ–Ω–∞ —Å—Ç–∞—Ä–∞—è –∑–∞–ø–∏—Å—å –∫–µ—à–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: \(keyToRemove)")
        }
    }
    
    
    func clearAllCache() {
        citiesCache.removeAll()
        stationsCache.removeAll()
        scheduleCache.removeAll()
        
        citiesCacheTimestamp = nil
        stationsCacheTimestamp.removeAll()
        scheduleCacheTimestamp.removeAll()
        
        print("üóÑÔ∏è –í–µ—Å—å –∫–µ—à –æ—á–∏—â–µ–Ω")
    }
    
    func clearExpiredCache() {
        let now = Date()
        
        
        if let timestamp = citiesCacheTimestamp,
           now.timeIntervalSince(timestamp) > cacheExpirationTime {
            citiesCache.removeAll()
            citiesCacheTimestamp = nil
            print("üóÑÔ∏è –£—Å—Ç–∞—Ä–µ–≤—à–∏–π –∫–µ—à –≥–æ—Ä–æ–¥–æ–≤ –æ—á–∏—â–µ–Ω")
        }
        
        
        for (cityName, timestamp) in stationsCacheTimestamp {
            if now.timeIntervalSince(timestamp) > cacheExpirationTime {
                stationsCache.removeValue(forKey: cityName)
                stationsCacheTimestamp.removeValue(forKey: cityName)
                print("üóÑÔ∏è –£—Å—Ç–∞—Ä–µ–≤—à–∏–π –∫–µ—à —Å—Ç–∞–Ω—Ü–∏–π –¥–ª—è '\(cityName)' –æ—á–∏—â–µ–Ω")
            }
        }
        
        
        for (key, timestamp) in scheduleCacheTimestamp {
            if now.timeIntervalSince(timestamp) > cacheExpirationTime {
                scheduleCache.removeValue(forKey: key)
                scheduleCacheTimestamp.removeValue(forKey: key)
                print("üóÑÔ∏è –£—Å—Ç–∞—Ä–µ–≤—à–∏–π –∫–µ—à —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è '\(key)' –æ—á–∏—â–µ–Ω")
            }
        }
    }
    
}
