//
//  CarriersListView.swift
//  Travel Schedule
//
//  Created by –î–∏–æ–Ω–∏—Å–∏–π –ö–æ–Ω–µ–≤–∏—á–µ–Ω–∫–æ on 28.07.2025.
//

import SwiftUI

struct CarriersListView: View {
    @State private var carriersViewModel = CarriersViewModel()
    @Environment(CarrierRouteViewModel.self) private var routeViewModel
    let fromCity: Cities
    let fromStation: RailwayStations
    let toCity: Cities
    let toStation: RailwayStations
    @Binding var navigationPath: NavigationPath
    
    var body: some View {
        ZStack {
            VStack {
                Text("\(fromCity.cityName) (\(fromStation.RailwayStationName)) ‚Üí \(toCity.cityName) (\(toStation.RailwayStationName))")
                    .font(.system(size: 24, weight: .bold))
                    .foregroundStyle(.blackDay)
                    .padding(.leading, -1)
                if routeViewModel.isLoading {
                    ProgressView("–ó–∞–≥—Ä—É–∑–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è...")
                        .frame(maxWidth: .infinity, maxHeight: .infinity)
                        .padding()
                } else if let errorMessage = routeViewModel.errorMessage {
                    VStack {
                        Text("–û—à–∏–±–∫–∞")
                            .font(.headline)
                        Text(errorMessage)
                            .font(.caption)
                            .foregroundColor(.secondary)
                            .multilineTextAlignment(.center)
                    }
                    .frame(maxWidth: .infinity, maxHeight: .infinity)
                    .padding()
                } else if routeViewModel.filteredRoutes.isEmpty {
                    Spacer()
                    Text("–ú–∞—Ä—à—Ä—É—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                        .font(.system(size: 24, weight: .bold))
                        .foregroundStyle(.blackDay)
                        .frame(width: 191, height: 29)
                        .padding(.bottom, 150)
                    Spacer()
                } else {
                    ScrollView {
                        LazyVStack(spacing: 12) {
                            ForEach(routeViewModel.filteredRoutes) { route in
                                Button(action: {
                                    // –ù–∞–≤–∏–≥–∞—Ü–∏—è –∫ —ç–∫—Ä–∞–Ω—É –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–µ—Ä–µ–≤–æ–∑—á–∏–∫–µ
                                    print("–í—ã–±—Ä–∞–Ω –º–∞—Ä—à—Ä—É—Ç: \(route.carrierName) –≤ \(route.departureTime)")
                                    navigationPath.append(ContentView.Destination.carrierDetail(route: route))
                                }) {
                                    CarriersRowView(route: route)
                                }
                                .buttonStyle(PlainButtonStyle())
                            }
                        }
                        .padding(.horizontal, 16)
                        .padding(.bottom, 80) // –û—Ç—Å—Ç—É–ø –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–£—Ç–æ—á–Ω–∏—Ç—å –≤—Ä–µ–º—è"
                    }
                }
            }
            .navigationBarBackButtonHidden(true)
            .navigationBarItems(leading: Button(action: {
                navigationPath.removeLast()
            }) {
                Image(systemName: "chevron.left")
                    .foregroundStyle(.blackDay)
            })
            .toolbar(.hidden, for: .tabBar)
            
            VStack {
                Spacer()
                Button(action: {
                    navigationPath.append(ContentView.Destination.filters(
                        fromCity: fromCity,
                        fromStation: fromStation,
                        toCity: toCity,
                        toStation: toStation
                    ))
                }) {
                    Text("–£—Ç–æ—á–Ω–∏—Ç—å –≤—Ä–µ–º—è")
                        .font(.system(size: 17, weight: .bold))
                        .foregroundStyle(.white)
                    if !routeViewModel.selectedPeriods.isEmpty || routeViewModel.showWithTransfer != nil {
                        Circle()
                            .fill(.redUniversal)
                            .frame(width: 8, height: 8)
                            .padding(.leading, -4)
                    }
                }
                .frame(width: 343, height: 35)
                .padding(.vertical, 12)
                .background(Color(UIColor(resource: .blueUniversal)))
                .clipShape(RoundedRectangle(cornerRadius: 16))
            }
            .padding(.horizontal, 16)
            .padding(.bottom, 16)
        }
        
        .task {
            // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –º–µ–∂–¥—É —Å—Ç–∞–Ω—Ü–∏—è–º–∏
            print("üöâ –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è:")
            print("   –û—Ç: \(fromCity.cityName) - \(fromStation.RailwayStationName)")
            print("   –ö–æ–¥ —Å—Ç–∞–Ω—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è: \(fromStation.stationCode ?? "–ù–ï–¢ –ö–û–î–ê")")
            print("   –î–æ: \(toCity.cityName) - \(toStation.RailwayStationName)")
            print("   –ö–æ–¥ —Å—Ç–∞–Ω—Ü–∏–∏ –ø—Ä–∏–±—ã—Ç–∏—è: \(toStation.stationCode ?? "–ù–ï–¢ –ö–û–î–ê")")
            
            let fromCode = fromStation.stationCode ?? ""
            let toCode = toStation.stationCode ?? ""
            
            if fromCode.isEmpty || toCode.isEmpty {
                print("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫–æ–¥—ã —Å—Ç–∞–Ω—Ü–∏–π - –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ")
                await routeViewModel.loadMockRoutes()
            } else {
                await routeViewModel.loadSchedule(
                    fromStation: fromCode,
                    toStation: toCode
                )
            }
        }
    }
}

#Preview {
    CarriersListView(
        fromCity: Cities(cityName: "–ú–æ—Å–∫–≤–∞"),
        fromStation: RailwayStations(RailwayStationName: "–ö–∏–µ–≤—Å–∫–∏–π –≤–æ–∫–∑–∞–ª"),
        toCity: Cities(cityName: "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥"),
        toStation: RailwayStations(RailwayStationName: "–ú–æ—Å–∫–æ–≤—Å–∫–∏–π –≤–æ–∫–∑–∞–ª"),
        navigationPath: .constant(NavigationPath())
    )
    // .environment(CarrierRouteViewModel())
}
