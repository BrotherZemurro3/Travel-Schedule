

import Foundation
import SwiftUI
import Observation
import OpenAPIRuntime
import OpenAPIURLSession

struct CarrierRoute: Identifiable, Hashable, @unchecked Sendable {
    var id = UUID()
    var carrierName: String
    var date: String
    var departureTime: String
    var arrivalTime: String
    var duration: String
    var withTransfer: Bool
    var carrierImage: String // Fallback –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤
    var carrierLogoUrl: String? // URL –ª–æ–≥–æ—Ç–∏–ø–∞ –ø–µ—Ä–µ–≤–æ–∑—á–∏–∫–∞ –∏–∑ API
    var note: String?
    var email: String
    var phone: String
}
@Observable
@MainActor
class CarrierRouteViewModel {
     var routes: [CarrierRoute]
     var selectedPeriods: Set<PeriodofTime> = []
     var showWithTransfer: Bool? = nil // —Ç—É—Ç nil –æ–∑–Ω–∞—á–∞–µ—Ç —á—Ç–æ —Ñ–∏–ª—å—Ç—Ä –ø–µ—Ä–µ—Å–∞–¥–æ–∫ –Ω–µ –±—ã–ª –ø—Ä–∏–º–µ–Ω–µ–Ω
     var isLoading: Bool = false
     var errorMessage: String?
     
     // MARK: - Private Properties
     private let networkClient = NetworkClient.shared
     private let cacheManager = CacheManager.shared
    
    init() {
        self.routes = []
        }
    
    // MARK: - Public Methods
    
    /// –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –º–µ–∂–¥—É —Å—Ç–∞–Ω—Ü–∏—è–º–∏
    func loadSchedule(fromStation: String, toStation: String) async {
        print("üöÇ –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è:")
        print("   –û—Ç —Å—Ç–∞–Ω—Ü–∏–∏: '\(fromStation)'")
        print("   –î–æ —Å—Ç–∞–Ω—Ü–∏–∏: '\(toStation)'")
        
        guard !fromStation.isEmpty && !toStation.isEmpty else {
            print("‚ùå –ü—É—Å—Ç—ã–µ –∫–æ–¥—ã —Å—Ç–∞–Ω—Ü–∏–π!")
            await MainActor.run {
                self.errorMessage = "–ù–µ —É–∫–∞–∑–∞–Ω—ã —Å—Ç–∞–Ω—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–ª–∏ –ø—Ä–∏–±—ã—Ç–∏—è"
            }
            return
        }
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD
        let formatter = DateFormatter()
        formatter.dateFormat = "yyyy-MM-dd"
        let dateString = formatter.string(from: Date())
        
        // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à
        if let cachedRoutes = cacheManager.getCachedSchedule(from: fromStation, to: toStation, date: dateString) {
            routes = cachedRoutes
            print("üóÑÔ∏è –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –∏–∑ –∫–µ—à–∞: \(fromStation) -> \(toStation), –º–∞—Ä—à—Ä—É—Ç–æ–≤: \(cachedRoutes.count)")
            return
        }
        
        isLoading = true
        errorMessage = nil
        
        do {
            print("üóìÔ∏è –î–∞—Ç–∞ –ø–æ–∏—Å–∫–∞: \(dateString)")
            print("üåê –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ API...")
            
            let response = try await networkClient.getScheduleBetweenStations(
                from: fromStation,
                to: toStation,
                date: dateString
            )
            
            print("‚úÖ –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç API")
            
            await MainActor.run {
                let loadedRoutes = self.processScheduleResponse(response)
                self.routes = loadedRoutes
                
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–µ—à
                self.cacheManager.cacheSchedule(loadedRoutes, from: fromStation, to: toStation, date: dateString)
                
                self.isLoading = false
                print("üöÇ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –∏–∑ API –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –∫–µ—à: \(loadedRoutes.count) –º–∞—Ä—à—Ä—É—Ç–æ–≤")
            }
        } catch {
            await MainActor.run {
                self.errorMessage = "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: \(error.localizedDescription)"
                // –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–∞–∫ fallback
                self.loadMockRoutesSync()
                self.isLoading = false
                print("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: \(error.localizedDescription)")
                print("üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ")
            }
        }
    }
    
    /// –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–∫–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤ (–ø—É–±–ª–∏—á–Ω—ã–π –º–µ—Ç–æ–¥)
    func loadMockRoutes() async {
        await MainActor.run {
            self.loadMockRoutesSync()
            self.isLoading = false
        }
    }
    
    // MARK: - Private Methods
    
    /// –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–∫–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤ (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π)
    private func loadMockRoutesSync() {
        routes = [
            CarrierRoute(
                carrierName: "–†–ñ–î",
                date: "14 —è–Ω–≤–∞—Ä—è",
                departureTime: "22:30",
                arrivalTime: "08:15",
                duration: "20 —á–∞—Å–æ–≤",
                withTransfer: true,
                carrierImage: "RJDmock",
                carrierLogoUrl: "https://yastat.net/s3/rasp/media/data/company/logo/112.png",
                note: "–° –ø–µ—Ä–µ—Å–∞–¥–∫–æ–π –≤ –ö–æ—Å—Ç—Ä–æ–º–µ",
                email: "info@rzd.ru",
                phone: "+7 (800) 775-00-00"
            ),
            CarrierRoute(
                carrierName: "–§–ì–ö",
                date: "15 —è–Ω–≤–∞—Ä—è",
                departureTime: "01:15",
                arrivalTime: "09:00",
                duration: "9 —á–∞—Å–æ–≤",
                withTransfer: false,
                carrierImage: "FGKmock",
                carrierLogoUrl: "https://yastat.net/s3/rasp/media/data/company/logo/996.png",
                email: "info@fgk.ru",
                phone: "+7 (495) 777-99-99"
            ),
            CarrierRoute(
                carrierName: "–£—Ä–∞–ª –ª–æ–≥–∏—Å—Ç–∏–∫–∞",
                date: "16 —è–Ω–≤–∞—Ä—è",
                departureTime: "12:30",
                arrivalTime: "21:00",
                duration: "9 —á–∞—Å–æ–≤",
                withTransfer: false,
                carrierImage: "URALmock",
                carrierLogoUrl: "https://yastat.net/s3/rasp/media/data/company/logo/680.png",
                email: "info@ural-logistics.ru",
                phone: "+7 (343) 123-45-67"
            )
        ]
    }
    
    /// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ API —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º
    private func processScheduleResponse(_ response: Components.Schemas.Segments) -> [CarrierRoute] {
        guard let segments = response.segments else { return [] }
        
        var scheduleRoutes: [CarrierRoute] = []
        
        for segment in segments {
            guard let thread = segment.thread,
                  let departure = segment.departure,
                  let arrival = segment.arrival else { continue }
            
            // –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞—Ä—à—Ä—É—Ç–µ
            let carrierName = thread.carrier?.title ?? "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–µ—Ä–µ–≤–æ–∑—á–∏–∫"
            let threadTitle = thread.title ?? ""
            
            // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è
            let departureTime = formatTime(departure)
            let arrivalTime = formatTime(arrival)
            
            // –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (—É–ø—Ä–æ—â–µ–Ω–Ω–æ)
            let duration = calculateDuration(from: departure, to: arrival)
            
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∞—Ç—É
            let date = formatDate(departure)
            
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–µ—Ä–µ—Å–∞–¥–æ–∫ (—É–ø—Ä–æ—â–µ–Ω–Ω–æ - –ø–æ–∫–∞ –≤—Å–µ–≥–¥–∞ false)
            let withTransfer = false // TODO: –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ –¥–∞–Ω–Ω—ã–º API
            
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–∑—á–∏–∫–∞
            let carrierImage = getCarrierImage(for: carrierName)
            
            // –ò–∑–≤–ª–µ–∫–∞–µ–º URL –ª–æ–≥–æ—Ç–∏–ø–∞ –∏–∑ API
            let carrierLogoUrl = thread.carrier?.logo
            
            // –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–Ω—Ç–∞–∫—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ API
            let email = thread.carrier?.email ?? "–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ —É–∫–∞–∑–∞–Ω–∞"
            let phone = thread.carrier?.phone ?? "–¢–µ–ª–µ—Ñ–æ–Ω –Ω–µ —É–∫–∞–∑–∞–Ω"
            
            let route = CarrierRoute(
                carrierName: carrierName,
                date: date,
                departureTime: departureTime,
                arrivalTime: arrivalTime,
                duration: duration,
                withTransfer: withTransfer,
                carrierImage: carrierImage,
                carrierLogoUrl: carrierLogoUrl,
                note: withTransfer ? "–° –ø–µ—Ä–µ—Å–∞–¥–∫–æ–π" : nil,
                email: email,
                phone: phone
            )
            
            scheduleRoutes.append(route)
        }
        
        return scheduleRoutes.sorted { $0.departureTime < $1.departureTime }
    }
    
    /// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –∏–∑ Date
    private func formatTime(_ date: Date) -> String {
        let timeFormatter = DateFormatter()
        timeFormatter.dateFormat = "HH:mm"
        return timeFormatter.string(from: date)
    }
    
    /// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã –∏–∑ Date
    private func formatDate(_ date: Date) -> String {
        let dateFormatter = DateFormatter()
        dateFormatter.dateFormat = "d MMMM"
        dateFormatter.locale = Locale(identifier: "ru_RU")
        return dateFormatter.string(from: date)
    }
    
    /// –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø–æ–µ–∑–¥–∫–∏
    private func calculateDuration(from departure: Date, to arrival: Date) -> String {
        let duration = arrival.timeIntervalSince(departure)
        let hours = Int(duration) / 3600
        let minutes = Int(duration) % 3600 / 60
        
        if hours > 0 && minutes > 0 {
            return "\(hours) —á \(minutes) –º–∏–Ω"
        } else if hours > 0 {
            return "\(hours) —á"
        } else {
            return "\(minutes) –º–∏–Ω"
        }
    }
    
    /// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–µ—Ä–µ–≤–æ–∑—á–∏–∫–∞
    private func getCarrierImage(for carrierName: String) -> String {
        let name = carrierName.lowercased()
        if name.contains("—Ä–∂–¥") || name.contains("—Ä–æ—Å—Å–∏–π—Å–∫–∏–µ –∂–µ–ª–µ–∑–Ω—ã–µ –¥–æ—Ä–æ–≥–∏") {
            return "RJDmock"
        } else if name.contains("—Ñ–≥–∫") || name.contains("—Ñ–µ–¥–µ—Ä–∞–ª—å–Ω–∞—è –≥—Ä—É–∑–æ–≤–∞—è") {
            return "FGKmock"
        } else if name.contains("—É—Ä–∞–ª") {
            return "URALmock"
        } else {
            return "RJDmock" // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
        }
    }
        
        
        var filteredRoutes: [CarrierRoute] {
            let filtered = routes.filter { route in
                // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è
                let isPeriodMatch: Bool
                if selectedPeriods.isEmpty {
                    isPeriodMatch = true
                } else {
                    let departureTime = route.departureTime
                    let components = departureTime.split(separator: ":").compactMap { Int($0) }
                    guard let hour = components.first else {
                        print("Failed to parse departureTime: \(departureTime)")
                        return false
                    }
                    isPeriodMatch = selectedPeriods.contains { (period: Travel_Schedule.PeriodofTime) in
                        switch period {
                        case .morning: return hour >= 6 && hour < 12
                        case .day: return hour >= 12 && hour < 18
                        case .evening: return hour >= 18 && hour < 24
                        case .night: return (hour >= 0 && hour < 6) || hour == 24
                        }
                    }
                }
                
                // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –ø–µ—Ä–µ—Å–∞–¥–∫–∞–º
                let isTransferMatch: Bool
                if let showWithTransfer = showWithTransfer {
                    isTransferMatch = route.withTransfer == showWithTransfer
                } else {
                    isTransferMatch = true
                }
                
                print("Route: \(route.departureTime), isPeriodMatch: \(isPeriodMatch), isTransferMatch: \(isTransferMatch)")
                return isPeriodMatch && isTransferMatch
            }
            print("Filtered routes count: \(filtered.count), selectedPeriods: \(selectedPeriods), showWithTransfer: \(String(describing: showWithTransfer))")
            return filtered
        }
    }

